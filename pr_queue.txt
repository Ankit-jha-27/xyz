#include <stdio.h>
#include <stdlib.h>
#define MAX 5
typedef struct PriorityQueue {
    int heap[MAX];
    int size;
} PriorityQueue;
void init(PriorityQueue* pq) {
    pq->size = 0;
}
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}
void heapifyUp(PriorityQueue* pq, int index) {
    int parent = (index - 1) / 2;
    if (index > 0 && pq->heap[index] > pq->heap[parent]) {
        swap(&pq->heap[index], &pq->heap[parent]);
        heapifyUp(pq, parent);
    }
}
void heapifyDown(PriorityQueue* pq, int index) {
    int largest = index;
    int left = 2 * index + 1;
    int right = 2 * index + 2;
    if (left < pq->size && pq->heap[left] > pq->heap[largest])
        largest = left;
    if (right < pq->size && pq->heap[right] > pq->heap[largest])
        largest = right;
    if (largest != index) {
        swap(&pq->heap[index], &pq->heap[largest]);
        heapifyDown(pq, largest);
    }
}
void insert(PriorityQueue* pq, int value) {
    if (pq->size == MAX) {
        printf("Priority Queue is full!\n");
        return;
    }
    pq->heap[pq->size] = value;
    pq->size++;
    heapifyUp(pq, pq->size - 1);
}
int extractMax(PriorityQueue* pq) {
    if (pq->size <= 0) {
        printf("Priority Queue is empty!\n");
        return -1;
    }
    int max = pq->heap[0];
    pq->heap[0] = pq->heap[pq->size - 1];
    pq->size--;
    heapifyDown(pq, 0);
    return max;
}
int getMax(PriorityQueue* pq) {
    if (pq->size <= 0) {
        printf("Priority Queue is empty!\n");
        return -1;
    }
    return pq->heap[0];
}
void display(PriorityQueue* pq) {
    if (pq->size <= 0) {
        printf("Priority Queue is empty!\n");
        return;
    }
    printf("Priority Queue: ");
    for (int i = 0; i < pq->size; i++) 
        printf("%d ", pq->heap[i]);
    printf("\n");
}
int main() {
    PriorityQueue pq;
    init(&pq);
    int choice, value;
    while (1) {
        printf("\nPriority Queue Operations:\n");
        printf("1. Insert\n");
        printf("2. Get Maximum\n");
        printf("3. Extract Maximum\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                insert(&pq, value);
                break;
            case 2:
                printf("Maximum: %d\n", getMax(&pq));
                break;
            case 3:
                printf("Extracted Maximum: %d\n", extractMax(&pq));
                break;
            case 4:
                display(&pq);
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }
    return 0;
}
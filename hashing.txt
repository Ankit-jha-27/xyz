#include <stdio.h>
#include <stdlib.h>
#define HASH_SIZE 10

typedef struct node{
    int data;
    struct node* next;
}node;

node* hashtable[HASH_SIZE];

void initializeTable(){
    for(int i = 0; i < HASH_SIZE;i++ )
        hashtable[i] = NULL;

}
     
int hashFunction(int key){
    return key % HASH_SIZE;
}

node* createNode(int data){
    node*newnode = (node*)malloc(sizeof(node));
    newnode -> data = data;
    newnode -> next = NULL;
    return newnode;
}

void insert(int data){
    int index = hashFunction(data);
    node* newnode = createNode(data);
    if(hashtable[index] == NULL)
        hashtable[index] = newnode;
    else{
        newnode -> next = hashtable[index];
        hashtable[index] = newnode;
    }   
        printf("inserted %d at index %d\n",data,index);
}

void displayTable(){
    for(int i = 0; i < HASH_SIZE; i++){
        printf("index %d : ",i);
        node* temp = hashtable[i];
        while(temp != NULL){
        printf("%d -> ",temp -> data);
        temp = temp -> next;
        }
            printf("NULL\n");
    }
}

int search(int data){
    int index = hashFunction(data);
    node* temp = hashtable[index];
    while(temp != NULL){
        if(temp -> data == data){
            return 1;
        }
        temp = temp -> next;
    }
    return 0;

}

void delete(int data){

    int index = hashFunction(data);
     node* temp = hashtable[index];
     node* prev = NULL;

     while(temp != NULL && temp -> data != data ){
        prev = temp;
        temp = temp ->next;
     }
     if(temp == NULL){
        printf("data %d not found in the hashtable\n",data);
        return;
     }
     if(prev == NULL){
        hashtable[index] = temp -> next;
     }

     else{
        prev -> next = temp -> next;
     } 

     free(temp);
    printf("data %d from index %d is deleted\n",data,index);
}

int main (){

    int choice;
    int value;
    initializeTable();

    while(1){
        printf("1- Insert\n");
        printf("2- Display\n");
        printf("3- Search\n");
        printf("4- Delete\n");
        printf("5- exit\n");

        printf("Enter your choice: ");
        scanf("%d",&choice);

        switch(choice){
            case 1:
                printf("Enter value to Insert: ");
                scanf("%d",&value);
                insert(value);
                break;

            case 2:
                displayTable();
                break;
            case 3:
                printf("Enter data to search: ");
                scanf("%d",&value);
               
               if(search(value)){
                printf("value %d found in the hashtable\n",value);
               }
               else
                printf("Value %d not found in the hashtable\n",value);
                break;

            case 4:
                printf("Enter the data to delete: ");
                scanf("%d",&value);
                delete(value);
                break;
            case 5:
                printf("Exiting the program\n");
                exit(0);

            default:
                printf("invalid choice\n");
        }
 
    }
return 0;
}

